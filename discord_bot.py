import asyncio
import functools
from time import sleep
from selenium import webdriver
import discord
from discord.ext import commands, tasks
import logging
import time

import parser_funcs
import data
logging.basicConfig(level=logging.INFO, filename="log.log",filemode="w", format='%(asctime)s %(message)s')

token = data.discord['token']
intent = discord.Intents.default()
intent.members = True
intent.message_content = True

bot = commands.Bot(command_prefix='!', intents=intent)

channel_id = data.discord['channel_id']

@functools.wraps(parser_funcs.check)
async def async_check(*args, **kwargs):
    return (await asyncio.to_thread(parser_funcs.check, *args, **kwargs))

@bot.command(pass_context=False)
async def check(ctx):
    flag = False
    await ctx.send('–ø–∞–¥–∞–∂–¥–∏')
    out = (await async_check(data=data.data, silent=False))
    if out:
        with open('tabel.html') as old_tabel:
            if out['tabel'] == old_tabel.read():
                await ctx.send('–≤—Å—ë –∫–∞–∫ –±—ã–ª–æ', file = discord.File("out.png"))
                logging.info(f"–ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                print(f"–ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            else:
                await ctx.send('—á—ë—Ç –Ω–æ–≤–æ–µ', file = discord.File("out.png"))
                logging.info(f"–ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print(f"–ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                flag = True
        if flag:
            with open('tabel.html','w') as table:
                table.write(out['tabel'])
    else:
        logging.error('–ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–∞ —è—Ç–æ –æ—à–∏–±–∫–∞')
        print('–ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–∞ —è—Ç–æ –æ—à–∏–±–∫–∞')
        await ctx.send('–û—à–∏–±–∫–∞')
    
@bot.command(pass_context=True)        
async def start(ctx, arg1, arg2):
    try:
        minutes, silent = int(arg1), arg2 == 'True'
    except:
         await ctx.send(f"—á—ë—Ç –≤–≤–≤—ë–ª –∫—Ä–∏–≤–æ")
    logging.info(f"–Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç –≤ {'—Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ' if silent else '–æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ'}")
    print(f"–Ω–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç –≤ {'—Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ' if silent else '–æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ'}")
    check_site.start(ctx, minutes, silent)
    await ctx.send(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–ª–æ–≤ –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç –≤ {'—Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ' if silent else '–æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ'}")

@bot.command(pass_context=False)
async def stop(ctx):
    check_site.cancel()
    logging.info('—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    print('—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    await ctx.send('—Ü–∏–∫–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')  
    
@tasks.loop(seconds=1)
async def check_site(ctx, minutes, silent):
    check_site.change_interval(minutes=minutes)
    flag = False
    out = (await async_check(data=data.data, silent=False)) 
    if out:
        with open('tabel.html') as table:
            if out['tabel'] == table.read():
                if not silent: await ctx.send('–≤—Å—ë –∫–∞–∫ –±—ã–ª–æ', file = discord.File("out.png"))
                logging.info(f"—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
                print(f"—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–µ—Ç –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            else:
                await ctx.send('–≤–∞—É –Ω–æ–≤–æ–µ –ø–æ—è–≤–∏–ª–æ—Å—å', file = discord.File("out.png"))
                await ctx.send('üôÉ', file = discord.File(out['image']))
                logging.info(f"—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                print(f"—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ")
                flag = True
        
        if flag:
            with open('tabel.html','w') as table:
                table.write(out['tabel'])
    else:
        logging.error('—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–∞ —è—Ç–æ –æ—à–∏–±–∫–∞')
        print('—Ü–∏–∫–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∫–∞ —è—Ç–æ –æ—à–∏–±–∫–∞')
        await ctx.send('–û—à–∏–±–∫–∞')


if __name__ == "__main__":
    bot.run(token)